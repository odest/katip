name: Build Desktop Test (Vulkan)
on:
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload build artifacts"
        required: false
        default: true
        type: boolean

jobs:
  build-desktop-test:
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            rust_targets: ""
            args: "--features vulkan"
            artifact_name: "katip-linux-x64-vulkan"
          - platform: "windows-latest"
            rust_targets: ""
            args: "--features vulkan"
            artifact_name: "katip-windows-x64-vulkan"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OS deps (Ubuntu only)
        if: ${{ matrix.platform == 'ubuntu-22.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Prepare Vulkan SDK for Ubuntu
        if: ${{ matrix.platform == 'ubuntu-22.04' }}
        run: |
          echo "Installing Vulkan SDK for Ubuntu..."
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.290-jammy.list https://packages.lunarg.com/vulkan/1.3.290/lunarg-vulkan-1.3.290-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk -y
          sudo apt-get install -y mesa-vulkan-drivers
          echo "âœ“ Vulkan SDK installed"
          # Verify installation
          vulkaninfo --summary || echo "âš  vulkaninfo not available (expected in CI)"

      - name: Setup Vulkan SDK for Windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          Write-Host "Installing Vulkan SDK for Windows..."
          $ProgressPreference = 'SilentlyContinue'

          # Download Vulkan SDK
          $vulkanUrl = "https://sdk.lunarg.com/sdk/download/1.3.290.0/windows/VulkanSDK-1.3.290.0-Installer.exe"
          $installerPath = "$env:TEMP\vulkan-sdk.exe"
          Write-Host "Downloading from: $vulkanUrl"
          Invoke-WebRequest -Uri $vulkanUrl -OutFile $installerPath

          # Install silently
          Write-Host "Installing Vulkan SDK..."
          Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait -NoNewWindow

          # Setup environment
          $vulkanPath = "C:\VulkanSDK\1.3.290.0"
          Write-Host "VULKAN_SDK path: $vulkanPath"

          # Add to PATH and env for current session
          echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "âœ“ Vulkan SDK installed"

          # Verify
          if (Test-Path "$vulkanPath\Bin\vulkaninfo.exe") {
            Write-Host "âœ“ vulkaninfo.exe found"
          } else {
            Write-Host "âš  vulkaninfo.exe not found"
          }
        shell: pwsh

      - name: Verify Vulkan SDK (Ubuntu)
        if: ${{ matrix.platform == 'ubuntu-22.04' }}
        run: |
          echo "Checking Vulkan SDK installation..."
          echo "VULKAN_SDK: ${VULKAN_SDK:-not set}"
          which glslc || echo "âš  glslc not in PATH"
          ls /usr/bin/glslc* || echo "âš  glslc not found in /usr/bin"

      - name: Verify Vulkan SDK (Windows)
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          Write-Host "Checking Vulkan SDK installation..."
          Write-Host "VULKAN_SDK: $env:VULKAN_SDK"
          Get-Command glslc.exe -ErrorAction SilentlyContinue | Format-List
        shell: pwsh

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_targets }}

      - name: Install frontend dependencies
        run: pnpm install

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/native/src-tauri -> target"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: "~/.pnpm-store"
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Build Tauri Desktop App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          projectPath: "apps/native"

      - name: Upload Build Artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            apps/native/src-tauri/target/release/bundle/**/*
          retention-days: 7

      - name: Build Summary
        run: |
          echo "### ðŸŽ‰ Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Features:** Vulkan GPU Acceleration âœ“" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact:** ${{ matrix.artifact_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Binary built with GPU acceleration support." >> $GITHUB_STEP_SUMMARY
          echo "End users will need Vulkan-capable GPU drivers installed." >> $GITHUB_STEP_SUMMARY
